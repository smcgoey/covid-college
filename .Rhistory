knitr::opts_chunk$set(echo = TRUE)
options(scipen = 999)
# load packages
library(tidyverse)
library(tidycensus)
library(janitor)
library(ggplot2)
library(scales)
library(ggthemes)
library(tigris)
# load files: Maryland FAFSA applications by high school for the 2019-20 and 2020-21 application cycles
apps_maryland_2019_2020 <- read.csv("data/md_school_data_2019_2020.csv") %>%
mutate(city = tolower(city)) %>%
rename(school = high_school) %>%
mutate(school = tolower(school))
# load files: FAFSA applications by state for the 2019-20 application cycle
apps_by_state_2019_2020 <- read.csv("data/2019-2020-app-data-by-state-q4.csv") %>%
clean_names() %>%
rename(apps_2019_2020 = ytd_total) %>%
mutate(apps_2019_2020 = as.numeric(apps_2019_2020)) %>%
mutate(state = trimws(state,"right")) %>%
filter(state != "Blank") %>%
select(state, apps_2019_2020)
# load files: FAFSA applications by state for the 2020-21 application cycle
apps_by_state_2020_2021 <- read.csv("data/2020-2021-app-data-by-state-q4.csv") %>%
clean_names() %>%
rename(apps_2020_2021 = ytd_total) %>%
mutate(apps_2020_2021 = as.numeric(apps_2020_2021)) %>%
mutate(state = trimws(state,"right")) %>%
filter(state != "Blank") %>%
select(state, apps_2020_2021)
# load files: zip/county data for every Maryland school
zip_county <- read.csv("data/md_school_data_zip_county.csv") %>%
mutate(zip5 = as.character(zip5)) %>%
mutate(school = tolower(school))
# join the Maryland FAFSA file to zip+county data - filtering out any rows with incomplete records
applications_combined_maryland <- apps_maryland_2019_2020 %>%
left_join(zip_county, by="school") %>%
select(school, school_type, city, zip5, county, everything()) %>%
filter(!is.na(school_type)) %>%
filter(!is.na(zip5)) %>%
filter(!is.na(county)) %>%
filter(!is.na(submitted_oct232020)) %>%
filter(!is.na(complete_oct232020)) %>%
filter(!is.na(submitted_oct232019)) %>%
filter(!is.na(complete_oct232019))
# join the state-by-state FAFSA files into one file
applications_combined_usa <- apps_by_state_2019_2020 %>%
left_join(apps_by_state_2020_2021, by="state")
# load Maryland ZIP census data
census_md_zip <- read_csv("data/census_md_zip.csv", col_names = TRUE) %>% mutate(zip5 = as.character(zip5))
# load state-level census data
census_state_zip <- read_csv("data/census_state_zip.csv", col_names = TRUE)
# join Maryland application data to Maryland census data
maryland_data_combined <- applications_combined_maryland %>%
left_join(census_md_zip, by = "zip5") %>%
rename(apps_2019_2020 = submitted_oct232019, apps_2020_2021 = submitted_oct232020) %>%
select(school, zip5, county, apps_2019_2020, apps_2020_2021, total_pop, white_pop, black_pop, hispanic_pop, owner_pop, renter_pop, hhi_0_24999_pop, hhi_25k_49999_pop, hhi_200k_plus_pop)
# join state-level application data to census data
state_data_combined <- applications_combined_usa %>%
inner_join(census_state_zip, by = "state") %>%
filter(state != "Puerto Rico") %>%
select(state, apps_2019_2020, apps_2020_2021, total_pop, white_pop, black_pop, hispanic_pop, owner_pop, renter_pop, hhi_0_24999_pop, hhi_25k_49999_pop, hhi_200k_plus_pop) %>%
mutate(apps_2019_2020_per_10k = apps_2019_2020/total_pop * 10000, apps_2020_2021_per_10k = apps_2020_2021/total_pop * 10000, pct_change_apps = ((apps_2020_2021 - apps_2019_2020)/apps_2019_2020))
# roll up from the school level to the ZIP level -- need to summarise census data using mean because data is at ZIP level and multiple schools in same ZIP codes
# also need to filter out ZIPs 20660 (possible error: more applications than residents) and 21285 (NA values)
maryland_data_combined_zip <- maryland_data_combined %>%
filter(zip5 != "20660") %>%
filter(zip5 != "21285") %>%
group_by(zip5, county) %>%
summarise(apps_2019_2020 = sum(apps_2019_2020), apps_2020_2021 = sum(apps_2020_2021), total_pop = mean(total_pop), white_pop = mean(white_pop), black_pop = mean(black_pop), hispanic_pop = mean(hispanic_pop), owner_pop = mean(owner_pop), renter_pop = mean(renter_pop), hhi_0_24999_pop = mean(hhi_0_24999_pop), hhi_25k_49999_pop = mean(hhi_25k_49999_pop), hhi_200k_plus_pop = mean(hhi_200k_plus_pop))
# roll up from the ZIP level to the county level -- summarise census data using sum since ZIPs are discrete sections of the county
maryland_data_combined_county <- maryland_data_combined_zip %>%
group_by(county) %>%
summarise(apps_2019_2020 = sum(apps_2019_2020), apps_2020_2021 = sum(apps_2020_2021), total_pop = sum(total_pop), white_pop = sum(white_pop), black_pop = sum(black_pop), hispanic_pop = sum(hispanic_pop), owner_pop = sum(owner_pop), renter_pop = sum(renter_pop), hhi_0_24999_pop = sum(hhi_0_24999_pop), hhi_25k_49999_pop = sum(hhi_25k_49999_pop), hhi_200k_plus_pop = sum(hhi_200k_plus_pop)) %>%
mutate(apps_2019_2020_per_10k = apps_2019_2020/total_pop * 10000, apps_2020_2021_per_10k = apps_2020_2021/total_pop * 10000, pct_change_apps = ((apps_2020_2021 - apps_2019_2020)/apps_2019_2020))
# add apps per 10,000 and % change in apps to ZIP rollup (added to county rollup in previous group)
maryland_data_combined_zip <- maryland_data_combined_zip %>%
mutate(apps_2019_2020_per_10k = apps_2019_2020/total_pop * 10000, apps_2020_2021_per_10k = apps_2020_2021/total_pop * 10000, pct_change_apps = ((apps_2020_2021 - apps_2019_2020)/apps_2019_2020))
# t-test for Maryland ZIPs
t.test(maryland_data_combined_zip$apps_2020_2021_per_10k, maryland_data_combined_zip$apps_2019_2020_per_10k, alternative = "two.sided", mu = 0, paired = TRUE, conf.level = 0.95)
# t-test for Maryland counties
t.test(maryland_data_combined_county$apps_2020_2021_per_10k, maryland_data_combined_county$apps_2019_2020_per_10k, alternative = "two.sided", mu = 0, paired = TRUE, conf.level = 0.95)
# t-test for U.S. states
t.test(state_data_combined$apps_2020_2021_per_10k, state_data_combined$apps_2019_2020_per_10k, alternative = "two.sided", mu = 0, paired = TRUE, conf.level = 0.95)
# build object with percentages of households having HHI 0-25k/25k-50k/200k+ and percent change in applications
state_hhi_applications <- state_data_combined %>%
mutate(hhi_0_24999_pct = hhi_0_24999_pop / total_pop, hhi_25k_49999_pct = hhi_25k_49999_pop / total_pop, hhi_200k_plus_pct = hhi_200k_plus_pop / total_pop) %>%
select(state, hhi_0_24999_pct, hhi_25k_49999_pct, hhi_200k_plus_pct, pct_change_apps)
# plot percent change in applications as a function of percent of HHI 0-25K
ggplot(state_hhi_applications) +
geom_point(aes(hhi_0_24999_pct, pct_change_apps)) +
labs(x="% with HHI $0-24,999", y="% change in FAFSA applications") +
geom_smooth(aes(hhi_0_24999_pct, pct_change_apps), method="lm", se=FALSE)
# plot percent change in applications as a function of percent of HHI 25K-50K
ggplot(state_hhi_applications) +
geom_point(aes(hhi_25k_49999_pct, pct_change_apps)) +
labs(x="% with HHI $25,000-49,999", y="% change in FAFSA applications") +
geom_smooth(aes(hhi_25k_49999_pct, pct_change_apps), method="lm", se=FALSE)
# plot percent change in applications as a function of percent of HHI > 200K
ggplot(state_hhi_applications) +
geom_point(aes(hhi_200k_plus_pct, pct_change_apps)) +
labs(x="% with HHI > $200,000", y="% change in FAFSA applications") +
geom_smooth(aes(hhi_200k_plus_pct, pct_change_apps), method="lm", se=FALSE)
# run correlation tests for each HHI percentage and percent change in applications
cor.test(state_hhi_applications$hhi_0_24999_pct, state_hhi_applications$pct_change_apps)
cor.test(state_hhi_applications$hhi_25k_49999_pct, state_hhi_applications$pct_change_apps)
cor.test(state_hhi_applications$hhi_200k_plus_pct, state_hhi_applications$pct_change_apps)
# build object with percentages of white/Black/Hispanic population and percent change in applications
state_race_applications <- state_data_combined %>%
mutate(white_pct = white_pop / total_pop, black_pct = black_pop / total_pop, hispanic_pct = hispanic_pop / total_pop) %>%
select(state, white_pct, black_pct, hispanic_pct, pct_change_apps)
# plot percent change in applications as a function of Black population
ggplot(state_race_applications) +
geom_point(aes(black_pct, pct_change_apps)) +
labs(x="Black population %", y="% change in FAFSA applications") +
geom_smooth(aes(black_pct, pct_change_apps), method="lm", se=FALSE)
# plot percent change in applications as a function of Hispanic population
ggplot(state_race_applications) +
geom_point(aes(hispanic_pct, pct_change_apps)) +
labs(x="Hispanic population %", y="% change in FAFSA applications") +
geom_smooth(aes(hispanic_pct, pct_change_apps), method="lm", se=FALSE)
# plot percent change in applications as a function of white population
ggplot(state_race_applications) +
geom_point(aes(white_pct, pct_change_apps)) +
labs(x="White population %", y="% change in FAFSA applications") +
geom_smooth(aes(white_pct, pct_change_apps), method="lm", se=FALSE)
# run correlation tests for each racial population and percent change in applications
cor.test(state_race_applications$black_pct, state_race_applications$pct_change_apps)
cor.test(state_race_applications$hispanic_pct, state_race_applications$pct_change_apps)
cor.test(state_race_applications$white_pct, state_race_applications$pct_change_apps)
# build object with percentages of owners/renters and percent change in applications
state_home_applications <- state_data_combined %>%
mutate(renter_pct = renter_pop / total_pop, owner_pct = owner_pop / total_pop) %>%
select(state, renter_pct, owner_pct, pct_change_apps)
# plot percent change in applications as a function of home ownership
ggplot(state_home_applications) +
geom_point(aes(owner_pct, pct_change_apps)) +
labs(x="Homeowner %", y="% change in FAFSA applications") +
geom_smooth(aes(owner_pct, pct_change_apps), method="lm", se=FALSE)
# plot percent change in applications as a function of home renting
ggplot(state_home_applications) +
geom_point(aes(renter_pct, pct_change_apps)) +
labs(x="Home renter %", y="% change in FAFSA applications") +
geom_smooth(aes(renter_pct, pct_change_apps), method="lm", se=FALSE)
# run correlation tests for own/rent and percent change in applications
cor.test(state_home_applications$owner_pct, state_home_applications$pct_change_apps)
cor.test(state_home_applications$renter_pct, state_home_applications$pct_change_apps)
# read in NYT's county-level COVID-19 data
nyt_covid <- read.csv("https://raw.githubusercontent.com/nytimes/covid-19-data/master/us-counties.csv") %>%
#mutate(key = paste(county, state, sep = "|", collapse=NULL)) %>%
filter(!is.na(fips)) %>%
filter(!str_detect(county, "Unknown")) %>%
group_by(state, county) %>%
summarise(case_peak = max(cases))
# build a Maryland-specific county-level table, manipulating the county field to match the format of our application objects
nyt_covid_maryland <- nyt_covid %>%
filter(state == "Maryland") %>%
mutate(county = tolower(county)) %>%
mutate(county = if_else(str_detect(county, "city"), county, paste0(county, " county", collapse=NULL)))
# build a state-level table, rolling each county up and summing the case peaks
nyt_covid_state <- nyt_covid %>%
group_by(state) %>%
summarise(case_peak = sum(case_peak))
# build object with peak COVID-19 cases per 10,000 residents and percent change in applications
state_covid_applications <- state_data_combined %>%
left_join(nyt_covid_state, by="state") %>%
mutate(case_peak_per_10k = ((case_peak / total_pop) * 10000)) %>%
select(state, case_peak_per_10k, pct_change_apps)
# plot percent change in applications as a function of case peak per 10k residents
ggplot(state_covid_applications) +
geom_point(aes(case_peak_per_10k, pct_change_apps)) +
labs(x="Peak COVID-19 cases per 10k residents", y="% change in FAFSA applications") +
geom_smooth(aes(case_peak_per_10k, pct_change_apps), method="lm", se=FALSE)
# run correlation test between case peak per 10K and percent change in applications
cor.test(state_covid_applications$case_peak_per_10k, state_covid_applications$pct_change_apps)
# build object with peak COVID-19 cases per 10,000 residents and percent change in applications
maryland_covid_applications <- maryland_data_combined_county %>%
left_join(nyt_covid_maryland, by="county") %>%
select (-state) %>%
mutate(case_peak_per_10k = ((case_peak / total_pop) * 10000)) %>%
select(county, case_peak_per_10k, pct_change_apps)
# plot percent change in applications as a function of case peak per 10k residents
ggplot(maryland_covid_applications) +
geom_point(aes(case_peak_per_10k, pct_change_apps)) +
labs(x="Peak COVID-19 cases per 10k residents", y="% change in FAFSA applications") +
geom_smooth(aes(case_peak_per_10k, pct_change_apps), method="lm", se=FALSE)
# run correlation test between case peak per 10K and percent change in applications
cor.test(maryland_covid_applications$case_peak_per_10k, maryland_covid_applications$pct_change_apps)
